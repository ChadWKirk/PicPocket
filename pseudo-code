https://github.com/ChadWKirk/PicPocket.git

Hosting and git workflow:

Complete app is on github in above link

Frontend is hosted on Netlify - Install Netlify CLI in client folder > npm run build > netlify deploy ./build > netlify deploy --prod ./build

Backend is hosted on Heroku - Install Heroku CLI in server folder > git add . > git commit -am "message" > git push heroku main

https://devcenter.heroku.com/articles/git

Have domain variable in App.js to toggle between using localhost for fetch routes or heroku domain for fetch routes to make it easier to develop

Routing:

1. Front End

- uses react-router-dom (npm i react-router-dom)
- Surround App in BrowserRouter in index.js
- Uses Routes and Route from rrd in App.js to decide which js file (aka page) is shown when browser is in certain route (ex. /SignUp)
- Footer is outside of routes because it's on every page

2. Back End

- Uses NodeJS and Express (npm i express)
- To retreive and/or manipulate data, uses fetch api unless AXIOS is required to use things like Multer for image upload

App.js states:

The states in App.js are there so one page can change a state and then it will get passed to a completely different page.

For example:

User goes to UserSettingsPage > Deletes their account > sets isJustDeleted to true > gets navigated to MainPage (navigate doesn't rerender/re-initiate state so it stays true) > if isJustDeleted is true, show account deleted banner.

Pages:

Not Found Page - This page appears when someone goes to a route that is not defined. For example: if someone tries going to picpoccket.com/signuppppppp or picpoccket.com/idk, it will display the Not Found Page.

Main Page - Main Page is the home page. It uses a navbar, hero section, image gallery, and join now section. To handle whether it is showing images sorted by Most Recent or Most Popular, there is a MainPageContent component inside the MainPage.js with a Page prop that determines the sorting. That prop is passed manually when creating the route in App.js, allowing for the use of the same component for both Most Recent and Most Popular. This is so you can change just one component (the MainPageContent component) and it applies to both / and /most-popular instead of having to change both pages when updating the format or styling etc..

Search Result Page - This page shows search results. It uses a navbar, image gallery heading component, image gallery and footer. When a user searches for something, they get moved to the search route+search parameters for sorting and filtering (ex: /search/dog?sort=most-recent&filter=all-types). These searchParams get changed when the sort or filter is changed from the drop down menu in the ImageGallerySortFilterAndSubheadingComponent component. When a user selects a sort or filter, it navigates to the current url but with the right searchParams. The GET request in the Search Result Page uses the searchParams in the URL to ask for the correct sorting/filtering of images in the NodeJS route.

Image View Page - This page shows one image that is selected from the ImageGallery. On first render, it shows an image modal, but on second render it shows the full page. It shows the image's author, a like button and download button, the image, the image's title, tags and description. When clicking the image, it scales the image and uses the cursor's position relative to the image's boundingRect to create a transform origin for the scaling, mimicing moving the image around while zoomed in so the user can zoom in on specific points. When the tags list gets long enough, arrow icons appear that you can click to scroll the tags list. The tags list runs a requestAnimationFrame, moving the tags list one full length of the tags list.

Image View Page > Image Modal - This isn't it's own page, but it's kinda like that. It is rendered on first render of Image View Page. When an image in ImageGallery is clicked, a state of the current scroll position is stored and isShowingImageSelectModal is set to true (in App.js). body overflow style is set to hidden to make body not scrollable while modal is up. Clicking the left/right arrow icons (not tags) shows the next or previous image in the ImageGallery. This is done by holding an array of image public ID's called imgTitleArrState when an ImageGallery component renders, which gets passed to the Image Modal component. When clicking the arrows, it changes the URL to have the public ID of the imgTitleArrState index either 1 behind or 1 in front of the current index. When clicking the black background or the X button of the modal, it brings you back to the previous page where the image gallery was rendered (ex: main page, search results page, etc.). This is done by storing the page in state in App.js and navigating to that page when clicked. It also automatically scrolls to the scroll position stored in state and sets body overflow style to auto to add scrollability back. When user refreshes in modal, it brings them to ImageViewPage due to isImageSelectModal being reset to false (default in App.js). When clicking the back or forward buttons for the browser, the Image View Page rerenders when the URL changes, causing a refetch of the imginfo and userInfo.

Components:

Email:

Email is done by Zoho and is connected to the https://picpoccket.com domain.

Image Selection (My Pics, My Likes):

- When single select, show edit stuff in form.
- Can mass delete and/or mass download.
- to handle form contents:

on checkbox click, if indexof object data is >= 0 (or .includes(object data) filter from array. if indexof <0 (-1) (or .!includes(object data), push object with info to an array.

On label click, reset array and then push label's info to array.

If massArr.current.length == 1, show that images info and preview and set submit/delete to that image

If array.length > 1, show stack of little images and say "Select a single image to edit it here"

- Keep array of what is selected in order to mass delete/download
- Have buttons that appear for delete/download when at least one image is selected

Google OAuth - https://console.cloud.google.com/ - https://youtu.be/TqlVP_IkS28 - https://www.npmjs.com/package/@react-oauth/google

Google / facebook sign in/up:

- post to /oauth/sign
- instead of username/pw, check for email/username
- if user with $and: email, username exists > run /signin stuff
- if doesn't exist > insert user as type: oauth, email: email, username: full name, pfp: google pic, no tokens because no need for email verify or pw change/forgot password > run /signup stuff (token)
- run dispatch thing that takes the token as payload
- navigate to either home page or sign up success page depending on res.json()
- don't display change password or change email if curUser.type === "oauth"

duplicate named images:

upload using multer instead of in front end with unsigned upload preset so you can input the random number so the initial public_id isn't a random string

for public id, put Math.floor(100000 + Math.random() {multiplied by} 900000) at the end of the name of the image

for example "lady" turns into "lady-245609" or "lady-333400"

when clicking image in gallery > go to /image/<public_id> without the "picpocket/" part > GET request to get image with req.params.public_id as public_id

sorting/filtering:

use all lowercase sort/filter values for example "atoz" instead of "aToz" to be able to allow for case insensitive sorting/filtering if user manually types the url

get cloudinary name and preset from back end instead of storing in env in front end (unsafe) - upload using multer to handle formData in express - https://cloudinary.com/documentation/upload_images https://medium.com/the-andela-way/how-to-upload-multiple-images-using-cloudinary-and-node-js-2f053b167b80 https://youtu.be/wIOpe8S2Mk8

Image Select Modal:

When an image in the image gallery component is clicked:

- store page that image gallery is in (home page, search results page, etc.)
- set isShowingModal to true
- navigate to image view page of that image
- fetch image and user information to show in the modal from image view page
- a modal appears showing the image and it's details along with like and download buttons and a left and right arrow buttons to either go to the next image or the previous image in the gallery.

When clicking the black background of the page or the X button, it uses navigate() to navigate back to the page where the image gallery resided when the modal first appeared.

//old To get the number of pages to navigate back to get to that page, a state starts at -1 and decreases by 1 each time an arrow button is clicked. For example, if a user clicks an image in an image gallery to open the modal and then clicks the forward arrow 1 time and then the back arrow 1 time, clicking out of the modal will navigate(-3) to go back 3 pages and returning to where the image gallery is.

It also keeps a state of scroll position before image is clicked, so when user exits the modal they get automatically scrolled to the position they were at before they opened the modal so they don't lose their place in the image gallery.

When clicking the back or forward buttons for the browser, the Image View Page rerenders when the URL changes, causing a refetch of the imginfo and userInfo.

Facebook OAuth - https://morioh.com/p/e37dfcf12462 - https://developers.facebook.com/docs/facebook-login/web - https://developers.facebook.com/docs/javascript/reference/FB.api/ - https://stackoverflow.com/questions/32436662/email-scope-is-not-working-which-is-used-in-fb-login

mkcert - use HTTPS on localhost to work with facebook OAuth (it doesn't work on http, only https). - install mkcert on both client and server, mkcert create-ca and mkcert create-cert on each, import the options in server.js and use https.createserver with those options, in react put https=true and ssl_cert_file path to crt file and ssl_key_file to key file path and set domain to https://localhost:5000 - https://ncoughlin.com/posts/https-on-localhost-with-react/#update-react-script

---

TASKS:

styling:

add browser comatibility

upload page - make it so dragging over upload form doesn't rerender image items causing them to flicker

navbar transition speed up

hamburger list fade out on unclick rather than instant

---

set up swiping motion for image modal

maybe make image select modal arrows a little more visible

update googleoauth to picpoccket url so it works in build

handle oauth "account already made with that email" error

put termly env vars in backend

---

How to manage images:

- host images on Cloudinary, fetch them from their API, store in MongoDB on upload so you can add likes and author.
- Can turn PNG or other lossless formats into jpg by just changing the extension on the url. get lastIndexOf "." in the URL and replace everything after it with "jpg". Use cloudinary scale terms and q_x term in url to scale down image dimensions and quality to further optimize them. https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_sizing. search slice in mypics page for code. https://cloudinary.com/documentation/image_optimization. for upload page, need to wait until it is uploaded and secure url is generated before slicing.

SIGNED OUT BEHAVIOR:

    - need to make it so that when liking a pic if signed out, don't increase likes
    and don't add "undefined" to likedBy. And take to sign up page
    that also has a sign in link "Already a member? Sign In"

Search:

- make it so plural form gets searched when searching for something and vice versa. Example searching for "Cats" brings up "Cat" and vice versa

Upload Images:

- deal with image view page going to proper URL and using the given title and description etc.

- don't allow anything but numbers, letters (both cases), spaces, undercores, dashes and apostrophes on edit in title - turn title box red and have text in red by Title label "(Do Not Use Special Characters.)". If try to submit with special characters in title, show alert saying "Remove Special Characters From Title" and don't submit. - run a function in onChange of title input field that checks if anything other than allowed chars are in title and changes input css accordingly. - have if statement in submit function to check if title has special chars to run post request or show alert.

My Pics page:

- DEAL WITH EDIT SUCCESS/FAILURE
- under title, have gallery to show pics. have ability to sort pics just like in a search page
- have the ability to check off pictures for mass delete

Likes page:

- show liked pictures in a gallery like search page
- able to sort like search page
- able to search through liked images with little search bar to the right. automatically updates them without changing url
- able to check off multiple ones and click remove from likes with are you sure box
- able to click three dots icon on individual images and hit remove from likes with are you sure box

Image-View Page:

- need to make page user goes to when clicking on a picture
- will have title, like button, description, price, tags, add to cart button, buy now button and free download button
- Will have related images section under that main section detailed above
- When clicking a tag, it will go to /search/thatTag and pull up all images with that tag or word in title

Overlay tip - use pointer-events: none; on after pseudo element to make it click through so you can click the image and right click save as the image.

Sign up:

- signing up as new user works
- sometimes sign up confirm box doesn't sign users out
- sometimes after confirm box, account page is blank

- send authentication email

server:

- fix "can not read collection" error that you get sometimes when server loads. Something with database not being ready yet.
